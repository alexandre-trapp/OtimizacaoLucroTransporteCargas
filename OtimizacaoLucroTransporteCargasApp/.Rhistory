diretorio <= file.choose()
diretorio = file.choose()
diretorio
head(diretorio)
tail(diretorio)
tail(diretorio)
head(diretorio)
read.csv()
x = read.csv(file.choose(), header = TRUE, sep = ";")
x
clear
cls
asdsad
library(xlsx)
library("xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
x2 = read.xlsx(file.choose(), sheetindex = 1)
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_231")
install.packages("xlsx")
Sys.setenv(JAVA_HOME="C:\\Program Files (x86)\\Java\\jre1.8.0_201")
install.packages("xlsx")
Sys.setenv(JAVA_HOME="C:\\Program Files (x86)\\Java\\jre1.8.0_201")
install.packages("xlsx")
install.packages('xlsx', lib='\\network\R\library')
install.packages('xlsx', lib='\\network\\R\\library')
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
shiny::runApp('D:/Alexandre/Estudos/MentorCarreiraIAComR/AppMentorCarreiraIAComR')
runApp('D:/Alexandre/Estudos/MentorCarreiraIAComR/AppMentorCarreiraIAComR')
shiny::runApp('D:/Alexandre/Estudos/PrevisaoQualidadeveiculosComR/PrevisaoQualidadeVeiculos')
shiny::runApp('D:/Alexandre/Estudos/PrevisaoProducaoLeite/PrevisaoProducaoLeiteApp')
shiny::runApp('D:/Alexandre/Estudos/PrevisaoProducaoLeite/PrevisaoProducaoLeiteApp')
runApp('D:/Alexandre/Estudos/PrevisaoProducaoLeite/PrevisaoProducaoLeiteApp')
runApp('D:/Alexandre/Estudos/PrevisaoProducaoLeite/PrevisaoProducaoLeiteApp')
install.packages("stringi")
install.packages("stringi", repos="http://cran.rstudio.com/", dependencies=TRUE)
shiny::runApp('D:/Alexandre/Estudos/ProbabilidadeQuebraEquipamentos/ProbabQuebraEquipamentosApp')
library(forecast)
library(ggplot2)
library(xts)
observeEvent(input$Processar, {
file1 = input$arquivo
data = read.csv(file1$datapath, header = F)
anoinic = as.integer(substr(input$datas[1],1,4))
mesinic = as.integer(substr(input$datas[1],6,7))
anofim = as.integer(substr(input$datas[2],1,4))
mesfim = as.integer(substr(input$datas[2],6,7))
data = ts(data, start = c(anoinic, mesinic), end = c(anofim, mesfim), frequency = 12)
valr = 24
treino = window(data, start = c(anoinc, mesinic), end = c(anofim -2, mesfim))
teste = window(data, start = c(anofim -2, mesinic), end = c(anofim, mesfim))
#naive
Mnaive = naive(treino, h=valr)
#mÃ©dia
Mmeanf = meanf(treino, h=valr)
#drift
Mrwf = rwf(treino, h=valr, drift=T)
#holt
Mholt = holt(treino, h=valr)
#holt winter aditivo
Mhw = hw(treino, seasonal = "additive", h=valr)
#holt winter multiplicativo
Mhw2 = hw(treino, seasonal = "multiplicative", h=valr)
#holt winter multiplicativo amortecido
Mhw3 = hw(treino, seasonal = "multiplicative", h=valr, damped=T, phi=0.9)
#arima
Marima = auto.arima(treino)
Marima = forecast(Marima, h=valr)
#linear
Mtslm = tslm(treino ~ trend, data=treino)
Mtslm = forecast(Mtslm, h=valr)
#rede neural
Mnnetar = nnetar(treino)
Mnnetar = forecast(Mnnetar, h=val)
output$Mnaive = renderTable({accuracy(teste, Mnaive$mean)})
output$TMnaive = renderText({"Naive"})
})
shiny::runApp('D:/Alexandre/Estudos/BenchmarkForecastSeriesTemporais/BenchmarkForecastSeriesTemporaisApp')
shiny::runApp('D:/Alexandre/Estudos/AnaliseDadosPublicos/AnaliseDadosPublicosApp')
shiny::runApp('D:/Alexandre/Estudos/OtimizacaoLucroTransporteCargas/OtimizacaoLucroTransporteCargasApp')
